import  re

#普通字符的定义及其使用
# 定义字符串
varStr = '鬼鬼Ilove China China666'
#定义正则表达式
reg = 'China'

#转义字符的定义及其使用

#定义正则表达式
reg = '\w'   #小w  匹配的是【单个】字母、数字或者下划线的字符
reg = '\W'   #大W  匹配的是【单个】非字母、数字或者下划线的字符
reg = '\d'   #小d  匹配的是【单个】数字的字符
reg = '\D'   #大D  匹配的是【单个】非数字的字符
reg = '\s'   #小s  匹配的是【单个】空格符或者制表符
reg = '\S'   #大S  匹配的是【单个】非空格符或制表符

#特殊字符的定义及其使用
#定义正则表达式
reg = '.'     #点(.) 匹配的是【单个】任意字符，但除了换行符
reg = '\w*'   #星(*) 代表的是匹配的次数【任意次数】 ‘\w*’匹配所有符合字母的字符串
              #如果使用*号，那么在匹配的开始处如果符合要求，则按照规则一直向后匹配，直到不符合规则要求把之前匹配的数据返回
              #如果在匹配的开始处就不满足规则要求就直接返回，匹配次数0

reg = '\w+'   #加(+) 代表的是匹配的次数【至少要求匹配一次】符合要求就继续匹配直到不满足要求
reg = '\w?'   #问(?) 代表拒绝贪婪，如果前面的匹配规则满足就直接返回，不继续匹配
reg = '\w*?'  #在此表达式中，由于*可匹配任意次数，匹配或不匹配都满足要求，？拒绝贪婪 故返回空
reg = '\w{5}' #花({}) 代表的式匹配次数 {4}里面的4表示匹配次数4
reg = '\w{2,5}' #代表的式匹配的次数区间 {2,5}表示匹配2~5次
reg = '[A-Z,a-z,0-9]' #[]代表【单个】字符的范围，满足该范围就返回
reg = '\w{4}(\d{3})'  #()代表自主，括号内的表达式首先作为整个正则表达式的一部分，另外会把符合小括号的内容单独提取一份
reg = '\w+?'   #“^”匹配开始部分，用“$”匹配结束部分以保证字符串前后不能有其他字符


#正则模式
# re.I 不区分大小写
vars = 'iLoveYou'
#定义正则表达式
reg1 = '[a-z]{5,8}'
res = re.search(reg1,vars,re.I)
print(res.group())
#结果输出
result = re.search(reg,varStr)
print(result) #输出的是Match对象
print(result.group()) #输出的是搜索的内容
print('len=',len(result.group()))
print(result.groups()) #配合（）使用，毕竟group只能获取第一个，groups可以获取多个